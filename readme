So I want to take this a step further and try to expand this project a little further and see what I can learn. Here is a psuedo code that I think could be some good ideas. 
Error Handling: Implement error handling to gracefully handle database errors, such as connection failures or SQL syntax errors. This will make the code more robust and resilient.

Input Validation: Add input validation to the CRUD operations functions to ensure that the input data is valid before interacting with the database. This helps prevent SQL injection attacks and ensures data integrity.

Additional CRUD Operations: Implement additional CRUD operations as needed, such as retrieving a single user by ID, deleting a single user by ID, or retrieving all users.

Pagination: Implement pagination for retrieving large sets of data from the database. This helps improve performance and reduces the load on the database server.

Logging: Add logging statements throughout the code to track the flow of execution and log important events or errors. This makes it easier to debug issues and monitor the application's behavior.

Authentication and Authorization: Implement authentication and authorization mechanisms to control access to the CRUD operations based on user roles or permissions. This ensures that only authorized users can perform certain actions.

API Integration: Convert the CRUD operations into an API by using a web framework like Flask or Django. This allows other applications to interact with the database through HTTP requests, providing a more flexible and scalable architecture.

Database Indexing: Consider adding indexes to the database table columns to improve query performance, especially for fields frequently used in search or filter operations.

Data Validation: Implement data validation rules to ensure that the data stored in the database adheres to certain constraints or standards. For example, enforce a maximum length for the username field or validate the format of email addresses.

Transaction Management: Use database transactions to ensure data consistency and integrity when performing multiple operations within a single transaction. This helps maintain the ACID properties of the database.